#!/usr/bin/env node

require('epipebomb')()
var argv = require('minimist')(process.argv.slice(2));

if (argv.help || argv.h) return usage();

var keys = require('../');
var debug = require('debug')('json-table');
var json = require('JSONStream');
var join = require('join-stream');
var csv = require('csv-stringify')
var through = require('through');
var lens = require('dot-lens').get;
var fs = require('fs');

var lenses = {};
var first = true;
var firstObj = true;
var argfields = argv.f || argv.fields;
var fields = argfields;
if (fields) fields = fields.split(',')

var delim = argv.d || argv.delim || ","
var source = argv._[0]? fs.createReadStream(argv._[0]) : process.stdin;

var s = source
.pipe(json.parse())
.pipe(through(handle))
.pipe(csv({ delimiter: delim }))
.on('end', function() {
  console.log("")
  if (!argfields) {
    console.error("It's possible not all fields were covered")
    console.error("Cache the json first and do <file.json json2csv -f `json-fields file.json`")
  }
})
.pipe(process.stdout)

function usage() {
  console.log('usage: json2csv [-f fieldList] [-d "|"] [file]');
  console.log();
  console.log('  Examples:');
  console.log();
  console.log('    # different delimeter');
  console.log('    # <package.json json2csv -d "|"');
  console.log();
  console.log('    # combo with json-fields');
  console.log('    # <package.json json2csv -f `json-fields package.json`');
  console.log();
  process.exit(1);
}

function handle(obj) {
  if (first === true) {
    first = false;
    fields = fields || keys(obj);
    fields.forEach(function(field){
      lenses[field] = lens(field)
    });
    this.queue(fields);
  }

  var row = fields.map(function(field){
    try {
      var val = lenses[field](obj);
      if (val == null) return "";
      return val;
    }
    catch (e) {
      debug("missing field '%s' in %j", field, obj);
      return "";
    }
  });

  this.queue(row);
}
